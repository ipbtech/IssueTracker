@model IEnumerable<WorkTaskTableGetVM>
@{
    ViewData["Title"] = "Home";
}

<div style="margin-top:90px; margin-bottom: 40px;">
    <h1>Welcome @ViewData["CurrentUserName"] to the TaskManager MinimalApp</h1>
</div>
<div class="table-responsive-sm">
    <div style="display:flex; flex-direction:row-reverse">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal"
                hx-get="/task/create" hx-swap="innerHTML" hx-target="#create-task-content">
            Create task
        </button>
    </div>
    <div style="margin-block: 15px; display:flex; flex-direction:row; justify-content:space-between; align-items:center">
        <div style="display:flex; flex-direction:row; align-items:center">
            <p style="margin-right:10px; margin-bottom: 0px;"><strong>Filtering:</strong></p>
            <p style="margin-right:10px; margin-bottom: 0px;">By&nbsp;Username:</p>
            <select class="form-select" style="margin-right:20px;">
                <option selected>Not</option>
                @foreach (var user in ViewData["Users"] as IEnumerable<UserGetVM>)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
            <p style="margin-right:10px; margin-bottom: 0px;">By&nbsp;Status:</p>
            <select class="form-select" style="margin-right:20px;">
                <option selected>Not</option>
                @foreach (var status in ViewData["Statuses"] as IEnumerable<WorkTaskStatusGetVM>)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>
        </div>
        <div style="display:flex; flex-direction:row; align-items:center">
            <p style="margin-right:10px; margin-bottom: 0px;"><strong>Sorting:</strong></p>
            <select class="form-select">
                <option selected value="0">Newer</option>
                <option value="1">Older</option>
            </select>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Status</th>
                <th scope="col">Author</th>
                <th scope="col">Created</th>
                <th scope="col">Closed</th>
                <th scope="col">WorkHours</th>
            </tr>
        </thead>
        <tbody>
            @{
                await Html.RenderPartialAsync("_TableRows", Model);
            }
        </tbody>
    </table>
</div>


<!-- Modal -->
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Create task</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="create-task-content" class="modal-body">
            </div>
            <div class="modal-footer">
                <button asp-controller="task" asp-action="create"
                    type="submit" form="create-task-form" class="btn btn-primary">Create
                </button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    @* <script>
        window.addEventListener('htmx:beforeRequest', (e) => {
            let urlObj = new URL(window.location.href);
            let page = urlObj.searchParams.get('page');

            if (page) {
                page = parseInt(page) + 1;
                urlObj.searchParams.set('page', page);
            } else {
                urlObj.searchParams.set('page', 2);
            }
            //debugger;
            window.history.pushState({}, '', urlObj.toString());
            let query = "/?" + urlObj.searchParams.toString();
            e.detail.elt.setAttribute('hx-get', query);
            console.log(e.detail.elt);
        });

    </script> *@
    <script>
        function dynamicLoadingParameters(el) {
            let urlObj = new URL(window.location.href);
            let page = urlObj.searchParams.get('page');

            if (page) {
                page = parseInt(page) + 1;
                urlObj.searchParams.set('page', page);
            } else {
                urlObj.searchParams.set('page', 2);
            }

            let query = "/?" + urlObj.searchParams.toString();
            console.log(query);

            el.setAttribute('hx-get', query);
            window.history.pushState({}, '', urlObj.toString());
        }
    </script>
}
