@model IEnumerable<IssueTableRowVM>
@{
    ViewData["Title"] = "Home";
}

<div style="margin-top:90px; margin-bottom: 40px;">
    <h1>Welcome @ViewData["CurrentUserName"] to the IssueTracker</h1>
</div>
<div class="table-responsive-sm">
    <div style="display:flex; flex-direction:row-reverse">
        <button id="create-btn" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal"
                hx-get="/issue/create" hx-swap="innerHTML" hx-target="#create-issue-content">
            Create issue
        </button>
    </div>
    <div style="margin-block: 15px; display:flex; flex-direction:row; justify-content:space-between; align-items:center">
        <div style="display:flex; flex-direction:row; align-items:center">
            <p style="margin-right:10px; margin-bottom: 0px;"><strong>Filtering:</strong></p>
            <p style="margin-right:10px; margin-bottom: 0px;">By&nbsp;Username:</p>
            <select class="form-select" style="margin-right:20px;" name="user" hx-get="/" hx-vals=""
                hx-target="#table-content" onchange="prepareQueryParams(this)">
                <option value="Not" selected>Not</option>
                @foreach (var user in ViewData["Users"] as IEnumerable<UserGetVM>)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
            <p style="margin-right:10px; margin-bottom: 0px;">By&nbsp;Status:</p>
            <select class="form-select" style="margin-right:20px;" name="status" hx-get="/" hx-vals=""
                hx-target="#table-content" onchange="prepareQueryParams(this)">
                <option value="Not" selected>Not</option>
                @foreach (var status in ViewData["Statuses"] as IEnumerable<StatusGetVM>)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>
        </div>
        <div style="display:flex; flex-direction:row; align-items:center">
            <p style="margin-right:10px; margin-bottom: 0px;"><strong>Sorting:</strong></p>
            <select class="form-select" name="sort" hx-get="/" hx-vals="" 
                hx-target="#table-content" onchange="prepareQueryParams(this)">
                <option selected value="0">Newer</option>
                <option value="1">Older</option>
            </select>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Status</th>
                <th scope="col">Author</th>
                <th scope="col">Created</th>
                <th scope="col">Closed</th>
                <th scope="col">WorkHours</th>
            </tr>
        </thead>
        <tbody id="table-content">
            @{
                await Html.RenderPartialAsync("_TableRows", Model);
            }
        </tbody>
    </table>
</div>


<!-- Modal -->
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="exampleModalLabel">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Create issue</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="create-issue-content" class="modal-body">
            </div>
            <div class="modal-footer">
                <button asp-controller="issue" asp-action="create"
                    type="submit" form="create-issue-form" class="btn btn-primary">Create
                </button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script>
        function prepareQueryParams(el) {
            let sortSelect = document.getElementsByName('sort')[0];
            let statusFilterSelect = document.getElementsByName('status')[0];
            let userFilterSelect = document.getElementsByName('user')[0];
            let loadMoreBtn = document.getElementsByName('load-more')[0];

            let params = {}
            //debugger;
            if (el.id == "load-more-btn") {
                params["page"] = loadMoreBtn.getAttribute('page');
            } else {
                params["page"] = 1;
            }
            params["sort"] = getParam(sortSelect);
            params["status"] = getParam(statusFilterSelect);
            params["user"] = getParam(userFilterSelect);

            console.log(params);
            //var values = [page, sort, myStatus, user].filter(s => s);
            el.setAttribute("hx-vals", JSON.stringify(params));
        };

        function getParam(selectElement) {
            for (var i = 0; i < selectElement.options.length; i++) {
                if (selectElement.options[i].selected) {
                    opt = selectElement.options[i].value;
                    if (opt != "Not") {
                        return opt;
                    }
                }
            }
        };
    </script>
    <script>
        document.body.addEventListener('htmx:afterRequest', function (e) {
            if (e.target.id == 'create-issue-content') {
                try {
                    let responce = JSON.parse(e.detail.xhr.response);
                    let value = responce.redirectUrl;
                    if (value) {
                        window.location.href = value;
                    }
                } catch {
                    console.log("Responce is not json");
                }
            }
        });
    </script>
}
